
《单例模式》：整个内部只new一次对象，不会重复new对象《全局变量》（做判断去控制new对象 对象存在直接返回不存在就new）。单个对象定义私有的构造函数防止第二次new会弹出报错

《工厂模式》：由一个大对象，控制其它部分实现功能时所需要的对象（根据类型去调用不同的小对象）《控制器 => new对象 => new其它的对象（多个）》

《抽象工厂模式》：工厂模式的套娃 再套一层《控制器 => new对象 => new其它的对象（多个） => new其它的对象（多个）》

《建造者模式》：由一个大对象，传入一个new的小对象（小对象里面的方法都一样），小对象都继承一个大类 重写方法的时候传入《参数》，大类里面构造函数new对象 这个对象的公共变量和传入《参数》名称一致

《原型模式》：clone关键字复制一个对象 clone关键字放在需复制对象里面，对象只需要new一次后面调用clone复制对象就行（复制的对象享受《复制前》传入的全局变量）

《适配器模式》：新增一个对象《适配器》去强行绑定两个毫不相干的对象，《适配器》传入一个对象实例 接口实现另一个对象，使用第一个对象实例可以调用第一个对象中的方法 用接口《覆盖》去实现使用第二个对象的方法

《桥接模式》：往一个大对象里面去注入两个小对象，一个是继承传过来的 一个参数传入。然后在构造函数实现参数传入的对象方法，在方法中实现继承。
例：发送信息 => 普通 加急 特急 | 普通 Email sms => new 特急（new Email（））

《过滤器模式》：类似tp的中间件，过滤数据使用。new一个对象传入多个对象或数组过滤之后返回一个数组

《组合模式》：树形结构组合，一个公共对象 其余的小对象去继承这个公共对象（建议操作一致时使用） 重写里面的方法 最底部的树不允许操作就直接返回

《装饰器模式》：对原有的数据进行修改，在不改动原有的代码的情况下（原先代码得先实现一个接口类）。新增一个装饰器的对象，继承一个对象A，对象A实现与原对象相同的接口类 在装饰器对象中做《数据处理》。
流程：获取模板 => new 装饰器（模板） => new 发送信息 => 发送信息->send（装饰器返回数据）

《外观模式》：整合所有的功能给到客户端，客户端只会访问一个类 。（两层树状格式头部有总和对象）

《享元模式》：共享元素（对象）不会去使用多个相同对象，可以说是单例模式的升级版本。单列&&享元区别：享元可以再次创建对象 而 单例一个进程只有一个对象

《代理模式》：由一个对象去代理到另外一个对象

《责任链模式》：类似判断体系，有多少个对象就有几个判断，通过传入数据去判断是否直接输出或者传到下一个对象中去。（判断不完全会报错）

《命令模式》：将一个请求封装为一个对象。将所有的操作封装到一个大对象中去，循环大对象数组注入数据去做接下来的操作。与工厂模式的区别：工厂模式通过大对象的判断找到小对象，命令模式循环一个对象数组去循环调用

《解释器模式》：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。一个终结对象 一个非终结对象，非终结对象通过终结对象的返回值去处理最终返回值，通过一个大对象去调用终结（事先传入参数）和非终结对象（传入终结对象《多个终结对象》）

《迭代器模式》：用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。实现Iterator接口，里面有方法供使用去循环访问元素。

《中介者模式》：提供中介对象用于处理不同对象的通信。MVC框架中 C就是M和V的中介。

《备忘录模式》：方便恢复数据使用。新建一个对象（管理器 单例模式）去存储要保存的数据，通过一个唯一键保存。

《观察者模式》：当一个对象的状态发生改变时，依赖他的对象会全部收到通知，并自动更新。（订阅发布是观察者模式的升级版）。实例：商品购买成功之后要减少库存，发送信息给客户，较少账号金额。

《状态模式》：一个对象有过多的判断时做《解体分发》到其它对象做处理。像《责任链模式》。与责任链模式的区别：责任链模式是客户端传入下一个对象（swich-case），而状态模式是在对象中指定下一个对象（if-elseif-else）

《空对象模式》：定义一个空对象来替代null，减少判断。

《策略模式》：偏向于处理算法，类似工厂模式和状态模式。和工厂模式的区别：工厂模式比较单一，工厂模式功能算法直接暴露 而 策略模式是隐藏起来的

《模板模式》：在抽象类中直接定义方法。子类继承抽象类，new子类直接调用抽象类中的方法。抽象类中的方法直接调用子类的方法。

《访问者模式》：访问者模式表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素类的前提下定义作用于这些元素的新操作。

《MVC模式》：M模型（处理数据库对象） C控制器（处理逻辑对象） V视图（处理数据可视化）

